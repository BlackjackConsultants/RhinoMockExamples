using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Rhino.Mocks;
using RhinoMockExamples.Model;
using RhinoMockExamples.Service;
using NHibernate;
using RhinoMockExamples.Exceptions.BusinessRules;
using System.Transactions;

namespace RhinoMockExamples {

    /// <summary>
    /// Defines the Data Import Operation Type for feedback messages generated by the data import services.
    /// </summary>
    public enum DataImportFeedbackOperation {

        /// <summary>
        /// The data import operation does nothing.
        /// </summary>
        None,

        /// <summary>
        /// Data Import Operation. Insert.
        /// </summary>
        Insert,

        /// <summary>
        /// Data Import Operation. Update.
        /// </summary>
        Update
    }

    [TestClass]
    public class MockingISerializable {
        public DataImportFeedbackOperation DataImportFeedbackOperation { get; private set; }

        [TestMethod]
        public void WhenUsingExactParamValuesReturnOnlyWhenThoseValuesArePassed() {
            var entityFeedbackInfo = MockRepository.GenerateMock<EntityFeedbackInfo>();
            var businessRule = MockRepository.GenerateMock<ConstraintViolationException>();
            var entitySerializationInfo = MockRepository.GenerateMock<EntitySerializationInfo>();
            var dataImportJobSchemaService = MockRepository.GenerateMock<IDataImportJobSchemaService>();
            var errorFeedback = new BusinessRuleErrorFeedback<Transaction>(entityFeedbackInfo, businessRule, DataImportFeedbackOperation.Insert, entitySerializationInfo, dataImportJobSchemaService);
            Assert.IsNotNull(errorFeedback);
        }
    }
}
